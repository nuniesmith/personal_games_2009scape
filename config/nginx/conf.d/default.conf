# --- Main 2009scape Services Configuration ---

# --- Client Web Interface (2009scape.local) ---
server {
    listen 80;
    server_name 2009scape.local; # Main domain for web client
    client_max_body_size 100M;

    # Security Headers
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    resolver 127.0.0.11 valid=30s;
    error_log /var/log/nginx/error.log debug;

    # -------------------------------
    # Main Web Client via noVNC
    # -------------------------------
    location / {
        # Use Docker service name instead of localhost
        set $upstream_client "http://client:6080";
        proxy_pass $upstream_client;
        
        # Apply rate limiting
        limit_req zone=client burst=20 nodelay;
        
        # Common proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (required for noVNC)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Extended timeouts for game client
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_connect_timeout 3600s;
    }
    
    # Static assets
    location /static/ {
        # Use Docker service name instead of localhost
        set $upstream_client "http://client:6080";
        proxy_pass $upstream_client/static/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache control for static assets
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
        
        # Enable compression for static assets
        gzip_static on;
    }
    
    # Favicon handling
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    
    # Health check endpoint
    location /health {
        limit_req zone=health burst=10 nodelay;
        
        # Check actual service health by accessing noVNC
        proxy_pass http://client:6080/vnc.html;
        proxy_set_header Host $host;
        proxy_pass_request_body off;
        proxy_method HEAD;
        
        # Consider service healthy if we get any response
        proxy_intercept_errors on;
        error_page 301 302 307 400 401 403 404 405 500 501 502 503 504 = @health_success;
    }
    
    location @health_success {
        return 200 'Web client is operational';
        add_header Content-Type text/plain;
    }
    
    # Handle errors
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    access_log /var/log/nginx/client_access.log;
    error_log /var/log/nginx/client_error.log warn;
}

# --- Game Server Service (server.2009scape.local) ---
server {
    listen 80;
    server_name server.2009scape.local;
    
    # Security Headers
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    
    # Direct connection to the game server
    # Note: This is mostly informational as RS clients connect directly to port 43595
    location / {
        return 200 '2009scape game server running on port 43595';
        add_header Content-Type text/plain;
    }
    
    # Status check - using netcat to check if port is open instead of HTTP check
    location /status {
        # Simple check to see if the app container is responding on port 43595
        # You could replace this with a real health check endpoint if available
        access_by_lua_block {
            local sock = ngx.socket.tcp()
            local ok, err = sock:connect("app", 43595)
            if not ok then
                ngx.status = 503
                ngx.say("Game server is not responding")
                return ngx.exit(503)
            end
            sock:close()
            ngx.say("Game server is running")
        }
        add_header Content-Type text/plain;
    }
    
    access_log /var/log/nginx/server_access.log;
    error_log /var/log/nginx/server_error.log warn;
}

# --- Database Admin Services (db.2009scape.local) ---
server {
    listen 80;
    server_name db.2009scape.local;
    
    # Security Headers
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    resolver 127.0.0.11 valid=30s;
    
    # -------------------------------
    # MySQL Database Info
    # -------------------------------
    location / {
        return 200 'Database information: MySQL running on port 3306\nUsername: jordan\nPassword: 123456';
        add_header Content-Type text/plain;
    }
    
    # -------------------------------
    # You could add phpMyAdmin or another DB admin tool here
    # -------------------------------
    location /phpmyadmin/ {
        # This is a placeholder - you would need to add phpMyAdmin service
        # to your docker-compose.yml to make this work
        return 404 'phpMyAdmin not configured';
    }
    
    access_log /var/log/nginx/db_access.log;
    error_log /var/log/nginx/db_error.log warn;
}

# --- Direct Game Access (game.2009scape.local:43595) ---
# This server block is informational, as the game client connects directly
# to the app service on port 43595, not through nginx
server {
    listen 80;
    server_name game.2009scape.local;
    
    location / {
        return 200 'Direct game connections go to port 43595. Configure your client to connect to this server at port 43595.';
        add_header Content-Type text/plain;
    }
}

# --- Connection Upgrade Mapping for Websockets ---
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# --- Define Cache & Expiry Mapping based on Content-Type ---
map $sent_http_content_type $expires {
    "text/html" 1h;
    "text/html; charset=utf-8" 1h;
    default off;
}

map $sent_http_content_type $cache_control {
    "text/html" "public, max-age=3600";
    "text/html; charset=utf-8" "public, max-age=3600";
    default "public, max-age=3600";
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=client:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=health:10m rate=15r/s;